/** @license RTreeJS

RTreeJS, a JavaScript Tree library that helps to query, insert and delete Rectangles.

Copyright Â© 2020-2021 Subendra Kumar Sharma. All rights reserved. (jobs.sharma.subendra.kr@gmail.com)

This file is part of RTreeJS.

RTreeJS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

RTreeJS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with RTreeJS.  If not, see <https://www.gnu.org/licenses/>.

Written by Subendra Kumar Sharma.

*/
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("Stack")):"function"==typeof define&&define.amd?define(["Stack"],e):"object"==typeof exports?exports.RTreeJS=e(require("Stack")):t.RTreeJS=e(t.Stack)}(window,(function(t){return function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="assets",i(i.s=2)}([function(e,i){e.exports=t},function(t,e,i){},function(t,e,i){"use strict";i.r(e),i.d(e,"RTreeIterative",(function(){return M}));var s=i(0);const r=Math.sqrt(Number.MAX_SAFE_INTEGER)-1e6,o=t=>(t.x2-t.x1)*(t.y2-t.y1),n=(t,e)=>({x1:t.x1<e.x1?t.x1:e.x1,x2:t.x2>e.x2?t.x2:e.x2,y1:t.y1<e.y1?t.y1:e.y1,y2:t.y2>e.y2?t.y2:e.y2}),l=(t,e)=>{let i=r,s=0,o=r,n=0;for(let r=0;r<e;r++){const e=t[r];i=e.rect.x1<i?e.rect.x1:i,s=e.rect.x2>s?e.rect.x2:s,o=e.rect.y1<o?e.rect.y1:o,n=e.rect.y2>n?e.rect.y2:n}return{x1:i,x2:s,y1:o,y2:n}},p=(t,e)=>t.x1===e.x1&&t.x2===e.x2&&t.y1===e.y1&&t.y2===e.y2,c=(t,e)=>t.x1<=e.x1&&t.x2>=e.x2&&t.y1<=e.y1&&t.y2>=e.y2,h=(t,e)=>!(t.x1>=e.x2||e.x1>=t.x2||t.y1>=e.y2||e.y1>=t.y2),a=(t,e)=>!(t.x1>e.x2||e.x1>t.x2||t.y1>e.y2||e.y1>t.y2),u=(t,e,i)=>{let s=Number.MAX_SAFE_INTEGER,r=0;for(let p=0;p<i;p++){const i=t[p],c=(o=n(i.rect,e),l=i.rect,(o.x2-o.x1)*(o.y2-o.y1)-(l.x2-l.x1)*(l.y2-l.y1));c<s&&(s=c,r=p)}var o,l;return r},d=(t,e,i)=>{for(let s=0;s<e;s++)if(p(t[s].rect,i.rect))return!0;return!1},y=(t,e,i)=>{for(let s=0;s<e;s++)if(p(t[s].rect,i))return s;return-1},k=(t={size:0,keys:[],pointers:[]},e)=>{for(let i=e;i<t.size-1;i++)t.keys[i]=t.keys[i+1],t.pointers[i]=t.pointers[i+1];t.size--},f=(t={size:0,keys:[],pointers:[]},e,i)=>{var s,r,l;let p,c=0,h=-1;for(let r=0;r<t.size;r++)r!==e&&((null===(s=t.pointers[r])||void 0===s?void 0:s.size)||-1)>i&&(p=o(t.keys[r].rect),p>c&&(c=p,h=r));let a=-1;if(h>=0){let i=Number.MAX_SAFE_INTEGER*Number.MAX_SAFE_INTEGER;const s=o(t.keys[e].rect);let p;for(let c=0;c<((null===(r=t.pointers[h])||void 0===r?void 0:r.size)||-1);c++)p=o(n((null===(l=t.pointers[h])||void 0===l?void 0:l.keys[c].rect)||{x1:Number.MAX_SAFE_INTEGER,x2:Number.MAX_SAFE_INTEGER,y1:Number.MAX_SAFE_INTEGER,y2:Number.MAX_SAFE_INTEGER},t.keys[e].rect)),Math.abs(p-s)<i&&(a=c,i=p)}if(a>=0)return{ptr:h,ptrPtr:a}},v=(t={size:0,keys:[],pointers:[]},e,i)=>{var s;const r=t.pointers[i.ptr]||{size:0,keys:[],pointers:[]},o=r.keys[i.ptrPtr].rect,n=r.pointers[i.ptrPtr];for(let t=i.ptrPtr;t<r.size-1;t++)r.keys[t]=r.keys[t+1],r.pointers[t]=r.pointers[t+1];r.size--,t.keys[i.ptr].rect=l(r.keys,r.size);const p=(null===(s=t.pointers[e])||void 0===s?void 0:s.size)||0,c=t.pointers[e]||{size:0,keys:[],pointers:[]};c.keys[p]={rect:o},c.pointers[p]=n,c.size++,t.keys[e].rect=l(c.keys,c.size)},S=(t={size:0,keys:[],pointers:[]},e,i)=>{let s=-1,r=Number.MAX_SAFE_INTEGER,l={x1:-1,x2:-1,y1:-1,y2:-1};for(let i=0;i<t.size;i++){if(i===e)continue;const p=n(t.keys[i].rect,t.keys[e].rect),c=o(p);c<r&&(r=c,l=p,s=i)}if(-1===s)return void(t.size=0);t.keys[s].rect=l;const p=t.pointers[e]||{size:0,keys:[],pointers:[]},c=t.pointers[s]||{size:0,keys:[],pointers:[]};let h=0;for(;h<p.size;)c.keys[c.size]=p.keys[h],c.pointers[c.size]=p.pointers[h],h++,c.size++;for(let i=e;i<t.size-1;i++)t.keys[i]=t.keys[i+1],t.pointers[i]=t.pointers[i+1];t.size--},x=(t,e,i,s)=>{const r=t[i],o=e[i];t[i]=t[s],e[i]=e[s],t[s]=r,e[s]=o},z=(t={size:0,keys:[],pointers:[]},e,i,s)=>{const{keys:r=[],pointers:o=[]}=t||{};let n=0,l=0,p=Number.MAX_SAFE_INTEGER,c=0;r[s]=e,o[s]=i;for(const[t,e]of r.entries())e.rect.x2<p&&(p=e.rect.x2,n=t),e.rect.x1>c&&(c=e.rect.x1,l=t);x(r,o,0,n),x(r,o,s,l)},g=(t={size:0,keys:[],pointers:[]},e,i,s,r)=>{const o=r;t.size=o;const n=new Array(s+1),l=new Array(s+1);let p=o,c=0;for(;p<s+1;)n[c]=e[p],l[c]=i[p],c++,p++;return{rightRd:n,rptrs:l,rightSize:c}},m=(t={size:0,keys:[],pointers:[]},e,i,s,r)=>{const{keys:l=[],pointers:p=[]}=t||{};z(t,e,i,s);const c=l[0].rect;let h,a,u,d=Number.MAX_SAFE_INTEGER,y=1;for(;y<s+1;){d=Number.MAX_SAFE_INTEGER,h=y;for(let t=y;t<=s;t++)a=n(c,l[t].rect),u=o(a),u<d&&(h=t,d=u);x(l,p,y,h),y++}return g(t,l,p,s,r)},E=(t={size:0,keys:[],pointers:[]},e,i,s,r)=>{const{keys:l=[],pointers:p=[]}=t||{};z(t,e,i,s);let c,h,a,u,d,y,k,f,v,S,m,E,b=l[0].rect,T=l[s].rect,M=1,H=s-1,N=o(b),_=o(T);for(;M<=H;)a=l[M].rect,u=l[H].rect,d=n(a,b),v=o(d),y=n(a,T),S=o(y),c=v-N>S-_,k=n(u,b),m=o(k),f=n(u,T),E=o(f),h=E-_>m-N,c&&h?(x(l,p,M,H),b=k,N=m,T=y,_=S,M++,H--):c||h?c?(E>S?(x(l,p,M,H),T=y,_=S):(T=f,_=E),H--):(v>m?(x(l,p,M,H),b=k,N=m):(b=d,N=v),M++):(b=d,N=v,T=f,_=E,M++,H--),M++,H--;return g(t,l,p,s,r)},b=["green","purple","blue","orange","aqua","blueviolet","brown","cadetblue","yellow","violet","thistle","teal","steelblue","silver","sienna","sandybrown","salmon","saddlebrown","olive"],T=(t,e,i)=>{const r=((t,e,i)=>{if(!t)return[];const r=new s.ArrayStack,o=new s.ArrayStack;let n=0;for(o.push({node:{rect:l(t.keys,t.size)},HEIGHT:n}),r.push({node:t,ptr:-1,HEIGHT:n++});!r.isEmpty();){const t=r.peek(),{node:e}=t;if(e.pointers[0])t.ptr+1<e.size?(o.push({node:e.keys[t.ptr+1],HEIGHT:n}),r.push({node:e.pointers[++t.ptr],ptr:-1,HEIGHT:n++})):(r.pop(),n--);else{for(let t=0;t<e.size;t++)o.push({node:e.keys[t],HEIGHT:n});r.pop(),n--}}return o.getData()})(t);console.log("data",r);const o=b.length,n={},p=r.length;for(let t=0;t<p-1;t++)r[t].HEIGHT<o?n[r[t].HEIGHT]=b[r[t].HEIGHT]:n[r[t].HEIGHT]="black";n[i]="red";const c=Math.max(...r.map(t=>t.node.rect.x2)),h=Math.max(...r.map(t=>t.node.rect.y2)),a=r.map(t=>{const e=1e3*t.node.rect.x1/c+4*t.HEIGHT;let i=1e3*t.node.rect.x2/c;i=i>4*t.HEIGHT?i-4*t.HEIGHT:i;const s=1e3*t.node.rect.y1/h+4*t.HEIGHT;let r=1e3*t.node.rect.y2/h;r=r>4*t.HEIGHT?r-4*t.HEIGHT:r;return`<g transform="translate(${e}, ${s})">\n\t\t\t<rect width="${i-e>0?i-e:1}" height="${r-s>0?r-s:1}" stroke="${n[t.HEIGHT]}" stroke-width="2" fill-opacity="0"/>\n\t\t</g>`}).reduce((t,e)=>t+e,""),u=Object.keys(n).map((t,e)=>`<g transform="translate(${70*e+10}, 10)"><circle r="5" fill="${n[t]}"/><text dx="10" dy="5">height: ${e}</text></g>`);r.sort((t,e)=>t.HEIGHT-e.HEIGHT);return`<svg width="1020" height="1070"><g width="1000" height="1000" transform="translate(0, 0)">${u}</g>\n\t<rect transform="translate(2, 48)" width="1000" height="1000" stroke="black" stroke-width="2" fill-opacity="0"/>\n\t<g transform="translate(0, 50)">${a}</g></svg>\n\t<div style="margin: 16px;">\n\t<p>height 0 is not an actual node, its just a rect surrounding all the rects in root node.</p>\n\t<p>Non-leaf node have colours other then red.</p>\n\t<p>Leaf node is always Red.</p>\n\t</div>\n\t<div style="display: flex; flex-direction: column; margin: 16px;">${r.reduce((t,e)=>t+`<div style="display:flex;"><span style="flex: 1;">height: ${e.HEIGHT},</span><span style="flex: 1;">rect: x1: ${e.node.rect.x1},</span><span style="flex: 1;">x2: ${e.node.rect.x2},</span><span style="flex: 1;">y1: ${e.node.rect.y1},</span><span style="flex: 1;">y2: ${e.node.rect.y2}</span></div>`,"")}</div>\n\t`};var M=class{constructor(t){var e,i,r;if(this.options=t,this.M=t.M||4,this.M%2==0?this.m=this.M/2:this.m=Math.ceil(this.M/2),this.M<2)throw"Value of M cannot be less than 2";if((null==t?void 0:t.m)&&Number.isInteger(t.m)&&t.m<=Math.ceil(this.M/2)&&t.m>=1)this.m=t.m;else if(null==t?void 0:t.m)throw"Can't hard set value of m for M, invalid value of m provided";this.splitNode=m,"linear"===(null==t?void 0:t.splitNode)&&(this.splitNode=E),this.root=void 0,this.length=0,this.height=0,this.initialStackSize=2*(null===(e=null==t?void 0:t.data)||void 0===e?void 0:e.length)||(null==t?void 0:t.initialStackSize)||100,this.initialQueueSize=2*(null===(i=null==t?void 0:t.data)||void 0===i?void 0:i.length)||(null==t?void 0:t.initialQueueSize)||100,this.insertStack=new s.ArrayStack({initialSize:this.initialStackSize}),this.ptrStack=new s.ArrayStack({initialSize:this.initialStackSize}),this.resultStack=new s.ArrayStack({initialSize:this.initialStackSize}),Array.isArray(null==t?void 0:t.data)&&this.constructTree(t.data),null===(r=this.options)||void 0===r||delete r.data}getRoot(){return this.root}constructNode(t,e,i,s){const r={size:0,pointers:new Array(this.M+1),keys:new Array(this.M+1)};return t?(r.keys[0]=t,r.pointers[0]=void 0,r.size=1):e&&i&&(r.keys=e,r.pointers=i,r.size=s||0),r}constructTree(t){const e=t.length;for(let i=0;i<e;i++)this.insert(t[i])}insert(t){return this._insert(t)}_insert(t){var e,i,s,r,o,n,p,c;let h,a=!1;if(this.insertStack.empty(),void 0===this.root)return this.root=this.constructNode(t),this.length++,this.height++,this.root;for(this.insertStack.push({node:this.root,pos:-1});!this.insertStack.isEmpty();){const o=this.insertStack.peek(),n=o.node;if(a)if(h){const t=l((null===(e=null==h?void 0:h.left)||void 0===e?void 0:e.keys)||[],(null===(i=null==h?void 0:h.left)||void 0===i?void 0:i.size)||0);n.keys[o.pos]={rect:t},n.pointers[o.pos]=null==h?void 0:h.left;const p=l((null===(s=null==h?void 0:h.right)||void 0===s?void 0:s.keys)||[],(null===(r=null==h?void 0:h.right)||void 0===r?void 0:r.size)||0);if(n.size<this.M)n.keys[n.size]={rect:p},n.pointers[n.size]=null==h?void 0:h.right,n.size++,h=void 0;else{const t=this.splitNode(n,{rect:p},h.right,this.M,this.m);h={left:n,right:this.constructNode(void 0,t.rightRd,t.rptrs,t.rightSize)}}this.insertStack.pop()}else n.keys[o.pos]={rect:l(n.pointers[o.pos].keys,n.pointers[o.pos].size)},this.insertStack.pop();else{if(null==n?void 0:n.pointers[0]){const e=u(n.keys,t.rect,n.size);o.pos=e,this.insertStack.push({node:n.pointers[e],pos:e});continue}if(d(n.keys,n.size,t))return;if(this.length++,n.size<this.M){n.keys[n.size]=t,n.size++,a=!0,this.insertStack.pop();continue}const e=this.splitNode(n,t,void 0,this.M,this.m);h={left:n,right:this.constructNode(void 0,e.rightRd,e.rptrs,e.rightSize)},a=!0,this.insertStack.pop()}}if(h){const t=l((null===(o=null==h?void 0:h.left)||void 0===o?void 0:o.keys)||[],(null===(n=null==h?void 0:h.left)||void 0===n?void 0:n.size)||0),e=l((null===(p=null==h?void 0:h.right)||void 0===p?void 0:p.keys)||[],(null===(c=null==h?void 0:h.right)||void 0===c?void 0:c.size)||0),i=this.constructNode();i&&(i.size=2,i.keys=[{rect:t},{rect:e}],i.pointers=[null==h?void 0:h.left,null==h?void 0:h.right],this.root=i),this.height++}}remove(t){return this._remove(t)}_remove(t){let e=!1;if(this.ptrStack.empty(),this.root)for(this.ptrStack.push({node:this.root,ptr:-1});!this.ptrStack.isEmpty();){const i=this.ptrStack.peek(),{node:s}=i;if(e)if(s.pointers[i.ptr].size<this.m){s.keys[i.ptr]={rect:l(s.pointers[i.ptr].keys,s.pointers[i.ptr].size)};const t=f(s,i.ptr,this.m);if(t)v(s,i.ptr,t);else if(S(s,i.ptr,this.m),s===this.root&&s.size<2){const t=this.root;this.root=t.pointers[0],t.keys=[];for(let e=0;e<this.M+1;e++)t.pointers[e]=void 0;this.height--,0===this.root.size&&(this.root=void 0,this.height=0,this.length=0)}this.ptrStack.pop()}else{const t=l(s.pointers[i.ptr].keys,s.pointers[i.ptr].size);s.keys[i.ptr]={rect:t},this.ptrStack.pop()}else if(s.pointers[0]){const e=i.ptr+1;for(let r=e;r<s.size;r++)if(c(s.keys[r].rect,t)){i.ptr=r,this.ptrStack.push({node:s.pointers[r],ptr:-1});break}i.ptr===e-1&&this.ptrStack.pop()}else{const i=y(s.keys,s.size,t);i>=0&&(k(s,i),e=!0,this.length--,s===this.root&&0===s.size&&(this.root=void 0,this.height=0,this.length=0)),this.ptrStack.pop()}}}find(t,e=!1,i=!1,s,r=!0){let o=h;return r&&(o=a),this._find(t,e,i,s,o)}_find(t,e=!1,i=!1,s,r){if(this.ptrStack.empty(),this.resultStack.empty(),!this.root&&i)return[];if(this.root){for(this.ptrStack.push({node:this.root,ptr:-1});!this.ptrStack.isEmpty();){const o=this.ptrStack.peek(),{node:n}=o;if(n.pointers[0]){const s=o.ptr+1;for(let l=s;l<n.size;l++)if(e&&!i?c(n.keys[l].rect,t):r(n.keys[l].rect,t)){o.ptr=l,this.ptrStack.push({node:n.pointers[l],ptr:-1});break}o.ptr===s-1&&this.ptrStack.pop()}else{for(let o=0;o<n.size;o++)if(e&&!i){if(p(n.keys[o].rect,t))return n.keys[o]}else if(i)!r(n.keys[o].rect,t)||s&&!s(n.keys[o],t)||this.resultStack.push(n.keys[o]);else if(r(n.keys[o].rect,t)&&(!s||s(n.keys[o],t)))return n.keys[o];this.ptrStack.pop()}}return this.resultStack.getData()}}getData(){if(!this.root)return[];for(this.ptrStack.empty(),this.resultStack.empty(),this.ptrStack.push({node:this.root,ptr:-1});!this.ptrStack.isEmpty();){const t=this.ptrStack.peek(),{node:e}=t;if(e.pointers[0])t.ptr+1<e.size?this.ptrStack.push({node:e.pointers[++t.ptr],ptr:-1}):this.ptrStack.pop();else{for(let t=0;t<e.size;t++)this.resultStack.push(e.keys[t]);this.ptrStack.pop()}}return this.resultStack.getData()}reset(){this.root=void 0,this.length=0,this.height=0}emptyTree(){this.root=void 0,this.length=0,this.height=0;const t=Math.max(this.insertStack.stack.length,this.ptrStack.length,this.resultStack.length);for(let e=0;e<t;e++)this.insertStack.stack[e]&&(this.insertStack.stack[e].node=void 0),this.ptrStack.stack[e]&&(this.ptrStack.stack[e].node=void 0),this.resultStack.stack[e]&&(this.resultStack.stack[e]=void 0)}printTree(){return T(this.root,this.length,this.height)}};i(1),e.default=M}])}));