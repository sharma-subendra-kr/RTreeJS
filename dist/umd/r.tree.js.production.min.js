/** @license RTreeJS

RTreeJS, a JavaScript Tree library that helps to query, insert and delete Rectangles.

Copyright Â© 2020-2021 Subendra Kumar Sharma. All rights reserved. (jobs.sharma.subendra.kr@gmail.com)

This file is part of RTreeJS.

RTreeJS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

RTreeJS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with RTreeJS.  If not, see <https://www.gnu.org/licenses/>.

Written by Subendra Kumar Sharma.

*/
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("Stack")):"function"==typeof define&&define.amd?define(["Stack"],e):"object"==typeof exports?exports.RTreeJS=e(require("Stack")):t.RTreeJS=e(t.Stack)}(window,(function(t){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="assets",s(s.s=2)}([function(e,s){e.exports=t},function(t,e,s){},function(t,e,s){"use strict";s.r(e),s.d(e,"RTreeIterative",(function(){return T}));var i=s(0);const r=Math.sqrt(Number.MAX_SAFE_INTEGER)-1e6,o=t=>Math.sqrt(t.x2-t.x1+(t.y2-t.y1)),n=(t,e)=>{const s=Math.sqrt(t.x2-t.x1+(t.y2-t.y1)),i=Math.sqrt(e.x2-e.x1+(e.y2-e.y1));return s>i?s-i:i-s},l=(t,e)=>({x1:t.x1<e.x1?t.x1:e.x1,x2:t.x2>e.x2?t.x2:e.x2,y1:t.y1<e.y1?t.y1:e.y1,y2:t.y2>e.y2?t.y2:e.y2}),p=(t,e)=>{let s=r,i=0,o=r,n=0;for(let r=0;r<e;r++){const e=t[r];s=e.rect.x1<s?e.rect.x1:s,i=e.rect.x2>i?e.rect.x2:i,o=e.rect.y1<o?e.rect.y1:o,n=e.rect.y2>n?e.rect.y2:n}return{x1:s,x2:i,y1:o,y2:n}},c=(t,e)=>t.x1===e.x1&&t.x2===e.x2&&t.y1===e.y1&&t.y2===e.y2,h=(t,e)=>t.x1<=e.x1&&t.x2>=e.x2&&t.y1<=e.y1&&t.y2>=e.y2,a=(t,e)=>!(t.x1>=e.x2||e.x1>=t.x2||t.y1>=e.y2||e.y1>=t.y2),u=(t,e)=>!(t.x1>e.x2||e.x1>t.x2||t.y1>e.y2||e.y1>t.y2),d=(t,e,s)=>{let i=Number.MAX_SAFE_INTEGER,r=0;for(let o=0;o<s;o++){const s=t[o],p=n(l(s.rect,e),s.rect);p<i&&(i=p,r=o)}return r},y=(t,e,s)=>{for(let i=0;i<e;i++)if(c(t[i].rect,s.rect))return!0;return!1},k=(t,e,s)=>{for(let i=0;i<e;i++)if(c(t[i].rect,s))return i;return-1},f=(t={size:0,keys:[],pointers:[]},e)=>{for(let s=e;s<t.size-1;s++)t.keys[s]=t.keys[s+1],t.pointers[s]=t.pointers[s+1];t.size--},v=(t={size:0,keys:[],pointers:[]},e,s)=>{let i=Number.MAX_SAFE_INTEGER,r=-1,n=-1;const p=t.keys[e].rect;for(let c=0;c<t.size;c++){if(c===e||t.pointers[c].size===s)continue;const h=t.pointers[c].keys,a=t.pointers[c].size;for(let t=0;t<a;t++){const e=h[t].rect,s=o(l(p,e));s<i&&(i=s,r=c,n=t)}}if(-1!==r)return{ptr:r,ptrPtr:n}},S=(t={size:0,keys:[],pointers:[]},e,s)=>{var i;const r=t.pointers[s.ptr]||{size:0,keys:[],pointers:[]},o=r.keys[s.ptrPtr],n=r.pointers[s.ptrPtr];for(let t=s.ptrPtr;t<r.size-1;t++)r.keys[t]=r.keys[t+1],r.pointers[t]=r.pointers[t+1];r.size--,t.keys[s.ptr].rect=p(r.keys,r.size);const l=(null===(i=t.pointers[e])||void 0===i?void 0:i.size)||0,c=t.pointers[e]||{size:0,keys:[],pointers:[]};c.keys[l]=o,c.pointers[l]=n,c.size++,t.keys[e].rect=p(c.keys,c.size)},z=(t={size:0,keys:[],pointers:[]},e,s)=>{let i=-1,r=Number.MAX_SAFE_INTEGER,n={x1:-1,x2:-1,y1:-1,y2:-1};for(let s=0;s<t.size;s++){if(s===e)continue;const p=l(t.keys[s].rect,t.keys[e].rect),c=o(p);c<r&&(r=c,n=p,i=s)}if(-1===i)return void(t.size=0);t.keys[i].rect=n;const p=t.pointers[e]||{size:0,keys:[],pointers:[]},c=t.pointers[i]||{size:0,keys:[],pointers:[]};let h=0;for(;h<p.size;)c.keys[c.size]=p.keys[h],c.pointers[c.size]=p.pointers[h],h++,c.size++;for(let s=e;s<t.size-1;s++)t.keys[s]=t.keys[s+1],t.pointers[s]=t.pointers[s+1];t.size--},x=(t,e,s,i)=>{const r=t[s],o=e[s];t[s]=t[i],e[s]=e[i],t[i]=r,e[i]=o},g=(t={size:0,keys:[],pointers:[]},e,s,i)=>{const{keys:r=[],pointers:o=[]}=t||{};let n=0,l=0,p=Number.MAX_SAFE_INTEGER,c=0;r[i]=e,o[i]=s;for(const[t,e]of r.entries())e.rect.x2<p&&(p=e.rect.x2,n=t),e.rect.x1>c&&(c=e.rect.x1,l=t);x(r,o,0,n),x(r,o,i,l)},m=(t={size:0,keys:[],pointers:[]},e,s,i,r)=>{let n=r;if(i%2==0){let t=e[0].rect,s=o(t),p=e[r+1].rect,c=o(p);for(let i=1;i<r;i++)t=l(t,e[i].rect),s=o(t);for(let t=r+2;t<=i;t++)p=l(p,e[t].rect),c=o(p);o(l(t,e[r].rect))-s<o(l(p,e[r].rect))-c&&n++}t.size=n;const p=new Array(i+1),c=new Array(i+1);let h=n,a=0;for(;h<i+1;)p[a]=e[h],c[a]=s[h],a++,h++;return{rightRd:p,rptrs:c,rightSize:a}},E=(t={size:0,keys:[],pointers:[]},e,s,i,r)=>{const{keys:n=[],pointers:p=[]}=t||{};g(t,e,s,i);const c=n[0].rect;let h,a,u,d=Number.MAX_SAFE_INTEGER,y=1;for(;y<i+1;){d=Number.MAX_SAFE_INTEGER,h=y;for(let t=y;t<=i;t++)a=l(c,n[t].rect),u=o(a),u<d&&(h=t,d=u);x(n,p,y,h),y++}return m(t,n,p,i,r)},H=(t={size:0,keys:[],pointers:[]},e,s,i,r)=>{const{keys:n=[],pointers:p=[]}=t||{};g(t,e,s,i);let c,h,a,u,d,y,k,f,v,S,z,E,H=n[0].rect,b=n[i].rect,M=1,T=i-1,I=o(H),G=o(b);for(;M<=T;)a=n[M].rect,u=n[T].rect,d=l(a,H),v=o(d),y=l(a,b),S=o(y),c=v-I>S-G,k=l(u,H),z=o(k),f=l(u,b),E=o(f),h=E-G>z-I,c&&h?(x(n,p,M,T),H=k,I=z,b=y,G=S,M++,T--):c||h?c?h?(M++,T--):(E>S?(x(n,p,M,T),b=y,G=S):(b=f,G=E),T--):(v>z?(x(n,p,M,T),H=k,I=z):(H=d,I=v),M++):(H=d,I=v,b=f,G=E,M++,T--);return m(t,n,p,i,r)},b=["green","purple","blue","orange","aqua","blueviolet","brown","cadetblue","yellow","violet","thistle","teal","steelblue","silver","sienna","sandybrown","salmon","saddlebrown","olive"],M=(t,e,s)=>{const r=((t,e,s)=>{if(!t)return[];const r=new i.ArrayStack,o=new i.ArrayStack;let n=0;for(o.push({node:{rect:p(t.keys,t.size)},HEIGHT:n}),r.push({node:t,ptr:-1,HEIGHT:n++});!r.isEmpty();){const t=r.peek(),{node:e}=t;if(e.pointers[0])t.ptr+1<e.size?(o.push({node:e.keys[t.ptr+1],HEIGHT:n}),r.push({node:e.pointers[++t.ptr],ptr:-1,HEIGHT:n++})):(r.pop(),n--);else{for(let t=0;t<e.size;t++)o.push({node:e.keys[t],HEIGHT:n});r.pop(),n--}}return o.getData()})(t);console.log("data",r);const o=b.length,n={},l=r.length;for(let t=0;t<l-1;t++)r[t].HEIGHT<o?n[r[t].HEIGHT]=b[r[t].HEIGHT]:n[r[t].HEIGHT]="black";n[s]="red";const c=Math.max(...r.map(t=>t.node.rect.x2)),h=Math.max(...r.map(t=>t.node.rect.y2)),a=r.map(t=>{const e=1e3*t.node.rect.x1/c+4*t.HEIGHT;let s=1e3*t.node.rect.x2/c;s=s>4*t.HEIGHT?s-4*t.HEIGHT:s;const i=1e3*t.node.rect.y1/h+4*t.HEIGHT;let r=1e3*t.node.rect.y2/h;r=r>4*t.HEIGHT?r-4*t.HEIGHT:r;return`<g transform="translate(${e}, ${i})">\n\t\t\t<rect width="${s-e>0?s-e:1}" height="${r-i>0?r-i:1}" stroke="${n[t.HEIGHT]}" stroke-width="2" fill-opacity="0"/>\n\t\t</g>`}).reduce((t,e)=>t+e,""),u=Object.keys(n).map((t,e)=>`<g transform="translate(${70*e+10}, 10)"><circle r="5" fill="${n[t]}"/><text dx="10" dy="5">height: ${e}</text></g>`);r.sort((t,e)=>t.HEIGHT-e.HEIGHT);return`<svg width="1020" height="1070"><g width="1000" height="1000" transform="translate(0, 0)">${u}</g>\n\t<rect transform="translate(2, 48)" width="1000" height="1000" stroke="black" stroke-width="2" fill-opacity="0"/>\n\t<g transform="translate(0, 50)">${a}</g></svg>\n\t<div style="margin: 16px;">\n\t<p>height 0 is not an actual node, its just a rect surrounding all the rects in root node.</p>\n\t<p>Non-leaf node have colours other then red.</p>\n\t<p>Leaf node is always Red.</p>\n\t</div>\n\t<div style="display: flex; flex-direction: column; margin: 16px;">${r.reduce((t,e)=>t+`<div style="display:flex;"><span style="flex: 1;">height: ${e.HEIGHT},</span><span style="flex: 1;">rect: x1: ${e.node.rect.x1},</span><span style="flex: 1;">x2: ${e.node.rect.x2},</span><span style="flex: 1;">y1: ${e.node.rect.y1},</span><span style="flex: 1;">y2: ${e.node.rect.y2}</span></div>`,"")}</div>\n\t`};var T=class{constructor(t){var e,s,r;if(this.options=t,this.M=t.M||4,this.M%2==0?this.m=this.M/2:this.m=Math.ceil(this.M/2),this.M<2)throw"Value of M cannot be less than 2";if((null==t?void 0:t.m)&&Number.isInteger(t.m)&&t.m<=Math.ceil(this.M/2)&&t.m>=1)this.m=t.m;else if(null==t?void 0:t.m)throw"Can't hard set value of m for M, invalid value of m provided";this.splitNode=E,"linear"===(null==t?void 0:t.splitNode)&&(this.splitNode=H),this.root=void 0,this.length=0,this.height=0,this.initialStackSize=2*(null===(e=null==t?void 0:t.data)||void 0===e?void 0:e.length)||(null==t?void 0:t.initialStackSize)||100,this.initialQueueSize=2*(null===(s=null==t?void 0:t.data)||void 0===s?void 0:s.length)||(null==t?void 0:t.initialQueueSize)||100,this.insertStack=new i.ArrayStack({initialSize:this.initialStackSize}),this.ptrStack=new i.ArrayStack({initialSize:this.initialStackSize}),this.resultStack=new i.ArrayStack({initialSize:this.initialStackSize}),Array.isArray(null==t?void 0:t.data)&&this.constructTree(t.data),null===(r=this.options)||void 0===r||delete r.data}getRoot(){return this.root}constructNode(t,e,s,i){const r={size:0,pointers:new Array(this.M+1),keys:new Array(this.M+1)};return t?(r.keys[0]=t,r.pointers[0]=void 0,r.size=1):e&&s&&(r.keys=e,r.pointers=s,r.size=i||0),r}constructTree(t){const e=t.length;for(let s=0;s<e;s++)this.insert(t[s])}insert(t){return this._insert(t)}_insert(t){var e,s,i,r,o,n,l,c;let h,a=!1;if(this.insertStack.empty(),void 0===this.root)return this.root=this.constructNode(t),this.length++,this.height++,this.root;for(this.insertStack.push({node:this.root,pos:-1});!this.insertStack.isEmpty();){const o=this.insertStack.peek(),n=o.node;if(a)if(h){const t=p((null===(e=null==h?void 0:h.left)||void 0===e?void 0:e.keys)||[],(null===(s=null==h?void 0:h.left)||void 0===s?void 0:s.size)||0);n.keys[o.pos]={rect:t},n.pointers[o.pos]=null==h?void 0:h.left;const l=p((null===(i=null==h?void 0:h.right)||void 0===i?void 0:i.keys)||[],(null===(r=null==h?void 0:h.right)||void 0===r?void 0:r.size)||0);if(n.size<this.M)n.keys[n.size]={rect:l},n.pointers[n.size]=null==h?void 0:h.right,n.size++,h=void 0;else{const t=this.splitNode(n,{rect:l},h.right,this.M,this.m);h={left:n,right:this.constructNode(void 0,t.rightRd,t.rptrs,t.rightSize)}}this.insertStack.pop()}else n.keys[o.pos]={rect:p(n.pointers[o.pos].keys,n.pointers[o.pos].size)},this.insertStack.pop();else{if(null==n?void 0:n.pointers[0]){const e=d(n.keys,t.rect,n.size);o.pos=e,this.insertStack.push({node:n.pointers[e],pos:e});continue}if(y(n.keys,n.size,t))return;if(this.length++,n.size<this.M){n.keys[n.size]=t,n.size++,a=!0,this.insertStack.pop();continue}const e=this.splitNode(n,t,void 0,this.M,this.m);h={left:n,right:this.constructNode(void 0,e.rightRd,e.rptrs,e.rightSize)},a=!0,this.insertStack.pop()}}if(h){const t=p((null===(o=null==h?void 0:h.left)||void 0===o?void 0:o.keys)||[],(null===(n=null==h?void 0:h.left)||void 0===n?void 0:n.size)||0),e=p((null===(l=null==h?void 0:h.right)||void 0===l?void 0:l.keys)||[],(null===(c=null==h?void 0:h.right)||void 0===c?void 0:c.size)||0),s=this.constructNode();s&&(s.size=2,s.keys=[{rect:t},{rect:e}],s.pointers=[null==h?void 0:h.left,null==h?void 0:h.right],this.root=s),this.height++}}remove(t){return this._remove(t)}_remove(t){let e=!1;if(this.ptrStack.empty(),this.root)for(this.ptrStack.push({node:this.root,ptr:-1});!this.ptrStack.isEmpty();){const s=this.ptrStack.peek(),{node:i}=s;if(e)if(i.pointers[s.ptr].size<this.m){i.keys[s.ptr]={rect:p(i.pointers[s.ptr].keys,i.pointers[s.ptr].size)};const t=v(i,s.ptr,this.m);if(t)S(i,s.ptr,t);else if(z(i,s.ptr,this.m),i===this.root&&i.size<2){const t=this.root;this.root=t.pointers[0],t.keys=[];for(let e=0;e<this.M+1;e++)t.pointers[e]=void 0;this.height--,0===this.root.size&&(this.root=void 0,this.height=0,this.length=0)}this.ptrStack.pop()}else{const t=p(i.pointers[s.ptr].keys,i.pointers[s.ptr].size);i.keys[s.ptr]={rect:t},this.ptrStack.pop()}else if(i.pointers[0]){const e=s.ptr+1;for(let r=e;r<i.size;r++)if(h(i.keys[r].rect,t)){s.ptr=r,this.ptrStack.push({node:i.pointers[r],ptr:-1});break}s.ptr===e-1&&this.ptrStack.pop()}else{const s=k(i.keys,i.size,t);s>=0&&(f(i,s),e=!0,this.length--,i===this.root&&0===i.size&&(this.root=void 0,this.height=0,this.length=0)),this.ptrStack.pop()}}}find(t,e=!1,s=!1,i,r=!0){let o=a;return r&&(o=u),this._find(t,e,s,i,o)}_find(t,e=!1,s=!1,i,r){if(this.ptrStack.empty(),this.resultStack.empty(),!this.root&&s)return[];if(this.root){for(this.ptrStack.push({node:this.root,ptr:-1});!this.ptrStack.isEmpty();){const o=this.ptrStack.peek(),{node:n}=o;if(n.pointers[0]){const i=o.ptr+1;for(let l=i;l<n.size;l++)if(e&&!s?h(n.keys[l].rect,t):r(n.keys[l].rect,t)){o.ptr=l,this.ptrStack.push({node:n.pointers[l],ptr:-1});break}o.ptr===i-1&&this.ptrStack.pop()}else{for(let o=0;o<n.size;o++)if(e&&!s){if(c(n.keys[o].rect,t))return n.keys[o]}else if(s)!r(n.keys[o].rect,t)||i&&!i(n.keys[o],t)||this.resultStack.push(n.keys[o]);else if(r(n.keys[o].rect,t)&&(!i||i(n.keys[o],t)))return n.keys[o];this.ptrStack.pop()}}return this.resultStack.getData()}}getData(){if(!this.root)return[];for(this.ptrStack.empty(),this.resultStack.empty(),this.ptrStack.push({node:this.root,ptr:-1});!this.ptrStack.isEmpty();){const t=this.ptrStack.peek(),{node:e}=t;if(e.pointers[0])t.ptr+1<e.size?this.ptrStack.push({node:e.pointers[++t.ptr],ptr:-1}):this.ptrStack.pop();else{for(let t=0;t<e.size;t++)this.resultStack.push(e.keys[t]);this.ptrStack.pop()}}return this.resultStack.getData()}reset(){this.root=void 0,this.length=0,this.height=0}emptyTree(){this.root=void 0,this.length=0,this.height=0;const t=Math.max(this.insertStack.stack.length,this.ptrStack.length,this.resultStack.length);for(let e=0;e<t;e++)this.insertStack.stack[e]&&(this.insertStack.stack[e].node=void 0),this.ptrStack.stack[e]&&(this.ptrStack.stack[e].node=void 0),this.resultStack.stack[e]&&(this.resultStack.stack[e]=void 0)}printTree(){return M(this.root,this.length,this.height)}};s(1),e.default=T}])}));